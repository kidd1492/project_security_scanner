### Project Identification and Stack Analysis

The project **AI-Powered Code Security Scanner** is primarily a **Python-based tool**. It utilizes structured data extraction and an AI model to analyze software projects, generating insights and security recommendations.

#### Key Features of the Stack:

1. **Language**: Python - The primary language used for development, which supports the creation of efficient and maintainable applications.
2. **Data Extraction**: Structured data extraction tools are integrated to process and gather metadata from project files, such as source code and documentation.
3. **AI Model Integration**: An AI model (Ollama) is utilized for project classification and comprehensive security assessments. This AI-driven approach enhances the tool's accuracy and depth in identifying potential security vulnerabilities.
4. **Security Scans**: The tool executes a variety of security scans, including Bandit, OWASP ZAP, JSLint, and others, to assess the overall security posture of the project.
5. **Reporting and Recommendations**: The tool generates detailed reports with AI-generated summaries and provides actionable recommendations for improving the project's security.
6. **Automation**: The integration of AI-driven evaluations ensures that security assessments are efficient and accessible.

### Summary

**AI-Powered Code Security Scanner** is a comprehensive software security solution designed to analyze, classify, and assess software projects. It leverages structured data extraction and an AI model to identify the project type, generate an overview, and recommend security scans tailored to the project's architecture. Beyond just classification, this tool executes security scans using tools like Bandit, OWASP ZAP, JSLint, and others, refining a project's security posture. The final stage involves a comprehensive AI-driven security review, providing detailed recommendations for improving the project's safety. This tool is intended to be user-friendly with a CLI interface, allowing for seamless analysis.

### Recommended Security Scans

The following are recommended scans based on the project type and architecture:

1. **OWASP ZAP**: A popular web application security scanner used to identify common vulnerabilities in web applications.
2. **Bandit**: An open-source tool that checks Python source code for suspicious constructs.
3. **JSLint**: JavaScript Linter to find errors and stylistic problems in JavaScript programs.

### Installation Instructions

1. Clone the repository from GitHub:
   ```bash
   git clone https://github.com/kidd1492/project_security_scanner.git
   ```

2. Navigate to the project directory and set up the virtual environment:
   ```bash
   cd project_security_scanner
   pip install -r requirements.txt
   ```

3. Run the program:
   ```bash
   python main.py  # prompts for directory path input
   ```
   or analyze files in a specific directory:
   ```bash
   python main.py Path/to/ProjectDirectory  # Generates JSON report
   ```

### License

This project is licensed under the **MIT License**. You can find more details in the `LICENSE` file.

By following these guidelines, you will be able to effectively identify and analyze your project's security posture using AI-Powered Code Security Scanner.